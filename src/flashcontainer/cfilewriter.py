""" C-Language source and header file writer
"""
# BSD 3-Clause License
#
# Copyright (c) 2022-2023, Haju Schulz (haju.schulz@online.de)
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its
#    contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

from typing import Dict
from pathlib import Path

import flashcontainer.datamodel as DM
from flashcontainer.byteconv import ByteConvert



class CFileWriter(DM.Walker):
    """C-Language source and header writer
    """

    def __init__(self, model: DM.Model, options: Dict[str, any]):
        super().__init__(model, options)

        self.cfilename = Path.joinpath(
            self.options.get("DESTDIR"),
            self.options.get("BASENAME") + ".c")

        self.hfilename = Path.joinpath(
            self.options.get("DESTDIR"),
            self.options.get("BASENAME") + ".h")

    def _write_c(self, txt: str, mode: str = 'a') -> None:
        """Append to c file (or overwrite)"""
        with open(self.cfilename, mode, encoding='utf-8') as cfile:
            cfile.write(txt)

    def _write_h(self, txt: str, mode: str = 'a') -> None:
        """Append to h file (or overwrite)"""
        with open(self.hfilename, mode, encoding='utf-8') as hfile:
            hfile.write(txt)

    def _write_both(self, txt: str, mode: str = 'a') -> None:
        """ Write same into h and c file"""
        self._write_h(txt, mode)
        self._write_c(txt, mode)

    def pre_run(self):
        print(
            f"Generating C-files "
            f'{Path.joinpath(self.options.get("DESTDIR"), self.options.get("BASENAME"))}.[ch].')

        self._write_both(
            f"/* AUTOGENERATED by "\
            f"{self.options.get('PNAME')} {self.options.get('VERSION')}\n"
            f" * cmd: {self.options.get('CMDLINE')}\n",
            'w')

        if self.options.get('STATICOUTPUT') is False:
            self._write_both(
                f" * Time: {self.options.get('DATETIME')}\n"\
                f" * Buildkey: {self.options.get('GUID')}\n")

        self._write_both(" * !! DO NOT EDIT MANUALLY !!\n */\n\n")

        include_guard = f"PARGEN_HEADER_INCLUDED_{self.options.get('BASENAME').upper()}"

        self._write_h(
            f"#ifndef {include_guard}\n#define {include_guard}\n\n"
            "#ifdef __cplusplus\n"
            "extern \"C\" {\n"
            "#endif\n\n"
            "#include <stdint.h>\n"
            "typedef struct sruct_pargen_header_type\n"
            "{\n"
            "    uint16_t id;\n"
            "    uint16_t major;\n"
            "    uint16_t minor;\n"
            "    uint16_t dataver;\n"
            "    uint32_t reserved;\n"
            "    uint32_t length;\n"
            "} pargen_header_type_t;\n\n"
            )

        self._write_c(f'#include "{self.options.get("BASENAME")+".h"}"\n\n')

    def post_run(self):
        self._write_h(
            "#ifdef __cplusplus\n"
            "}\n"
            "#endif\n#endif\n")

    def begin_block(self, block: DM.Block) -> None:
        """Write block comment and header """

        self._write_both(
            f"/* BEGIN Block {self.ctx_block.name} in container "
            f"{self.ctx_container.name} @ {hex(self.ctx_block.addr)}\n")

        if block.comment is not None:
            self._write_both(" *\n")

            for line in block.comment.splitlines():
                self._write_both(" * " + line + "\n")
        self._write_both(" */\n")

        if block.header is not None:
            self._write_h("extern ")
            self._write_both(f"volatile const pargen_header_type_t {self.ctx_block.name}_blkhdr")

            self._write_c(
                " =\n{\n"
                f"    0x{block.header.block_id:04X},\n"
                f"    0x{block.header.version.major:04X},\n"
                f"    0x{block.header.version.minor:04X},\n"
                f"    0x{block.header.version.version:04X},\n"
                f"    0x00000000,\n"
                f"    0x{block.length:08X},\n"
                "}")

            self._write_both(";\n\n")

    def end_block(self, block: DM.Block) -> None:
        self._write_both(f"/* END Block {self.ctx_block.name} */\n\n")

    def begin_parameter(self, param: DM.Parameter) -> None:
        """Patch parameter bytes into intelhex object"""

        self._write_both(f"/* Parameter {param.name} @ {hex(param.offset)}\n")

        # write optional comment
        if param.comment is not None:
            for line in param.comment.splitlines():
                self._write_both(" * " + line + "\n")

        # write CRC data
        if param.crc_cfg is not None:
            self._write_both(f" * crc: {param.crc_cfg}\n")

        self._write_both(" */\n")

        if param.ptype == DM.ParamType.COMPLEX:
            self._write_h("extern ")
            self._write_both(
                f"volatile const "
                f"pargen_{param.datastruct.name}_type_t "
                f"{param.name}")

            self._write_c(" = ")
            self._write_c(ByteConvert.struct_to_c_init(param, self.ctx_block.endianess))

            self._write_both(";\n\n")
        else:
            self._write_h("extern ")
            self._write_both(
                f"volatile const "
                f"{DM.TYPE_DATA[param.ptype].ctype} "
                f"{param.name}")

            element_size = ByteConvert.get_type_size(param.ptype)
            if (DM.ParamType.UTF8 == param.ptype) or (element_size < len(param.value)):
                self._write_both(f"[{int(len(param.value)/ element_size)}]")

            self._write_c(" = \n")
            self._write_c(ByteConvert.bytes_to_c_init(
                param.ptype,
                self.ctx_block.endianess,
                param.value))
            self._write_both(";\n\n")

    def begin_struct(self, strct: DM.Datastruct) -> None:
        # write comment
        self._write_h(f"/* Typedef for {strct.name} struct")
        if strct.comment is not None:
            self._write_h(" *\n")

            for line in strct.comment.splitlines():
                self._write_h(" * " + line + "\n")
        self._write_h(" */\n")

        # write typedef
        self._write_h(
            "#pragma pack(push, 1)\n"
            f"typedef struct sruct_pargen_{strct.name}_type\n"
            "{\n"
        )
        pad_cnt = 0
        for field in strct.fields:
            if isinstance(field, DM.Padding):
                self._write_h(f"    char padding{pad_cnt}[{field.get_size()}];\n")
                pad_cnt += 1
            elif isinstance(field, DM.Field):
                self._write_h(f"    {DM.TYPE_DATA[field.type].ctype} {field.name};\n")
            elif isinstance(field, DM.ArrayField):
                self._write_h(f"    {DM.TYPE_DATA[field.type].ctype} {field.name}[{field.count}];\n")
            elif isinstance(field, DM.CrcField):
                self._write_h(f"    {DM.TYPE_DATA[field.type].ctype} {field.name};\n")
        self._write_h(
                f"}} pargen_{strct.name}_type_t;\n"
                "#pragma pack(pop)\n\n"
            )
